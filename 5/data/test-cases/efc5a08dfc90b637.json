{
  "uid" : "efc5a08dfc90b637",
  "name" : "test__login",
  "fullName" : "test.test_main.TestConduit#test__login",
  "historyId" : "0c0274160b3715ff3dc8fd59f32302fe",
  "time" : {
    "start" : 1628667396524,
    "stop" : 1628667401782,
    "duration" : 5258
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <test_main.TestConduit object at 0x7f8cc0c6f310>\n\n    def test__login(self):\n        accept_cookies(self.driver)\n        sign_in_button = WebDriverWait(self.driver, 5).until(\n            EC.presence_of_element_located((By.XPATH, '//a[@href=\"#/login\"]'))\n        )\n        sign_in_button.click()\n        login_email_field = WebDriverWait(self.driver, 5).until(\n            EC.presence_of_element_located((By.XPATH, '//input[@placeholder=\"Email\"]'))\n        )\n        login_password_field = self.driver.find_element_by_xpath('//input[@placeholder=\"Password\"]')\n        login_email_field.click()\n        login_button = self.driver.find_element_by_xpath('//button[@class=\"btn btn-lg btn-primary pull-xs-right\"]')\n        with open(\"user_data.csv\", \"r\", encoding='utf-8') as csvfile_read:\n            csvreader = csv.reader(csvfile_read.readlines(), delimiter=',')\n            next(csvreader)\n            for row in csvreader:\n                login_email_field.click()\n                login_email_field.send_keys(row[1])\n                login_password_field.click()\n                login_password_field.send_keys(row[2])\n                login_button.click()\n                break\n>       log_out_button = WebDriverWait(self.driver, 5).until(\n            EC.presence_of_element_located((By.XPATH, '//*[@class=\"nav-link\" and contains(text(),\"Log out\")]'))\n        )\n\ntest/test_main.py:201: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ac54be0b62e31ff894ac19dc865f0f33\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7f8cc0c96e20>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <test_main.TestConduit object at 0x7f8cc0c6f310>\n\n    def test__login(self):\n        accept_cookies(self.driver)\n        sign_in_button = WebDriverWait(self.driver, 5).until(\n            EC.presence_of_element_located((By.XPATH, '//a[@href=\"#/login\"]'))\n        )\n        sign_in_button.click()\n        login_email_field = WebDriverWait(self.driver, 5).until(\n            EC.presence_of_element_located((By.XPATH, '//input[@placeholder=\"Email\"]'))\n        )\n        login_password_field = self.driver.find_element_by_xpath('//input[@placeholder=\"Password\"]')\n        login_email_field.click()\n        login_button = self.driver.find_element_by_xpath('//button[@class=\"btn btn-lg btn-primary pull-xs-right\"]')\n        with open(\"user_data.csv\", \"r\", encoding='utf-8') as csvfile_read:\n            csvreader = csv.reader(csvfile_read.readlines(), delimiter=',')\n            next(csvreader)\n            for row in csvreader:\n                login_email_field.click()\n                login_email_field.send_keys(row[1])\n                login_password_field.click()\n                login_password_field.send_keys(row[2])\n                login_button.click()\n                break\n>       log_out_button = WebDriverWait(self.driver, 5).until(\n            EC.presence_of_element_located((By.XPATH, '//*[@class=\"nav-link\" and contains(text(),\"Log out\")]'))\n        )\n\ntest/test_main.py:201: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ac54be0b62e31ff894ac19dc865f0f33\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7f8cc0c96e20>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "80b3fd91fb83a720",
      "name" : "log",
      "source" : "80b3fd91fb83a720.txt",
      "type" : "text/plain",
      "size" : 344
    }, {
      "uid" : "f2eda72685a08b9f",
      "name" : "stderr",
      "source" : "f2eda72685a08b9f.txt",
      "type" : "text/plain",
      "size" : 215
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_main"
  }, {
    "name" : "subSuite",
    "value" : "TestConduit"
  }, {
    "name" : "host",
    "value" : "fv-az36-389"
  }, {
    "name" : "thread",
    "value" : "3862-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_main"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "efc5a08dfc90b637.json",
  "parameterValues" : [ ]
}